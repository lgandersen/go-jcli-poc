// Package Openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package Openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Configuration for a container that is portable between hosts
type ContainerConfig struct {
	Cmd *[]string `json:"cmd,omitempty"`

	// List of environment variables set when the command is executed
	Env *[]string `json:"env,omitempty"`

	// The name of the image to use when creating the container
	Image *string `json:"image,omitempty"`

	// List of jail parameters (see jail(8) for details)
	JailParam *[]string `json:"jail_param,omitempty"`

	// List of networks that the container should be connected to
	Networks *[]string `json:"networks,omitempty"`

	// List of volumes that should be mounted into the container
	Volumes *[]string `json:"volumes,omitempty"`
}

// summary description of a container
type ContainerSummary struct {
	// Command being used when starting the container
	Command *string `json:"command,omitempty"`

	// When the container was created
	Created *string `json:"created,omitempty"`

	// The id of this container
	Id *string `json:"id,omitempty"`

	// The id of the image that this container was created from
	ImageId *string `json:"image_id,omitempty"`

	// Name of the image that this container was created from
	ImageName *string `json:"image_name,omitempty"`

	// Tag of the image that this container was created from
	ImageTag *string `json:"image_tag,omitempty"`

	// Name of the container
	Name *string `json:"name,omitempty"`

	// whether or not the container is running
	Running *bool `json:"running,omitempty"`
}

// Represents an error
type ErrorResponse struct {
	// The error message.
	Message string `json:"message"`
}

// Response to an API call that returns just an Id
type IdResponse struct {
	// The id of the created/modified/destroyed object.
	Id string `json:"id"`
}

// the image metadata
type Image struct {
	// Default command used when creating a container from this image
	Command *[]string `json:"command,omitempty"`

	// When the image was created
	Created *string `json:"created,omitempty"`

	// List of environment variables and their values to set before running command.
	EnvVars *[]string `json:"env_vars,omitempty"`

	// The id of the image
	Id *string `json:"id,omitempty"`

	// Id of the layer containing the image
	LayerId *string `json:"layer_id,omitempty"`

	// Name of the image
	Name *string `json:"name,omitempty"`

	// Tag of the image
	Tag *string `json:"tag,omitempty"`

	// user used when executing the command
	User *string `json:"user,omitempty"`
}

// Network configuration
type NetworkConfig struct {
	// Network type. Only 'loopback' type of network is supported.
	Driver *string `json:"driver,omitempty"`

	// Name of the interface that is being used for the network.
	Ifname *string `json:"ifname,omitempty"`

	// Name of the network.
	Name string `json:"name"`

	// The subnet (in CIDR-format) that is used for the network.
	Subnet *string `json:"subnet,omitempty"`
}

// summary description of a network
type NetworkSummary struct {
	// interface where the gateway can be reached
	DefaultGwIf *bool `json:"default_gw_if,omitempty"`

	// Which type of network is used. Possible values are 'loopback' where the network is situated on a loopback interface on the host, and 'host' where the container have inherited the hosts network configuration. Only one read-only network exists with the 'host' driver.
	Driver *string `json:"driver,omitempty"`

	// The id of the network
	Id *string `json:"id,omitempty"`

	// Name of the loopback interface used for the network
	IfName *string `json:"if_name,omitempty"`

	// Name of the network
	Name *string `json:"name,omitempty"`

	// Subnet used for the network
	Subnet *string `json:"subnet,omitempty"`
}

// Volume configuration
type VolumeConfig struct {
	// Name of the volume.
	Name string `json:"name"`
}

// summary description of a volume
type VolumeSummary struct {
	// when the volume was created
	Created *string `json:"created,omitempty"`

	// underlying zfs dataset of the volume
	Dataset *string `json:"dataset,omitempty"`

	// main mountpoint of the volume (the mountpoint shown with 'zfs list')
	Mountpoint *string `json:"mountpoint,omitempty"`

	// Name of the volume
	Name *string `json:"name,omitempty"`
}

// ContainerCreateJSONBody defines parameters for ContainerCreate.
type ContainerCreateJSONBody ContainerConfig

// ContainerCreateParams defines parameters for ContainerCreate.
type ContainerCreateParams struct {
	// Assign the specified name to the container. Must match `/?[a-zA-Z0-9][a-zA-Z0-9_.-]+`.
	Name *string `json:"name,omitempty"`
}

// ContainerListParams defines parameters for ContainerList.
type ContainerListParams struct {
	// Return all containers. By default, only running containers are shown.
	All *bool `json:"all,omitempty"`
}

// NetworkCreateJSONBody defines parameters for NetworkCreate.
type NetworkCreateJSONBody NetworkConfig

// VolumeCreateJSONBody defines parameters for VolumeCreate.
type VolumeCreateJSONBody VolumeConfig

// ContainerCreateJSONRequestBody defines body for ContainerCreate for application/json ContentType.
type ContainerCreateJSONRequestBody ContainerCreateJSONBody

// NetworkCreateJSONRequestBody defines body for NetworkCreate for application/json ContentType.
type NetworkCreateJSONRequestBody NetworkCreateJSONBody

// VolumeCreateJSONRequestBody defines body for VolumeCreate for application/json ContentType.
type VolumeCreateJSONRequestBody VolumeCreateJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ContainerCreate request with any body
	ContainerCreateWithBody(ctx context.Context, params *ContainerCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ContainerCreate(ctx context.Context, params *ContainerCreateParams, body ContainerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContainerList request
	ContainerList(ctx context.Context, params *ContainerListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContainerDelete request
	ContainerDelete(ctx context.Context, containerId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContainerStart request
	ContainerStart(ctx context.Context, containerId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContainerStop request
	ContainerStop(ctx context.Context, containerId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ImageList request
	ImageList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ImageRemove request
	ImageRemove(ctx context.Context, imageId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkCreate request with any body
	NetworkCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NetworkCreate(ctx context.Context, body NetworkCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkList request
	NetworkList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkRemove request
	NetworkRemove(ctx context.Context, networkId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkConnect request
	NetworkConnect(ctx context.Context, networkId string, containerId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkDisconnect request
	NetworkDisconnect(ctx context.Context, networkId string, containerId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolumeCreate request with any body
	VolumeCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VolumeCreate(ctx context.Context, body VolumeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolumeList request
	VolumeList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VolumeRemove request
	VolumeRemove(ctx context.Context, volumeName string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ContainerCreateWithBody(ctx context.Context, params *ContainerCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContainerCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContainerCreate(ctx context.Context, params *ContainerCreateParams, body ContainerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContainerCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContainerList(ctx context.Context, params *ContainerListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContainerListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContainerDelete(ctx context.Context, containerId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContainerDeleteRequest(c.Server, containerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContainerStart(ctx context.Context, containerId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContainerStartRequest(c.Server, containerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContainerStop(ctx context.Context, containerId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContainerStopRequest(c.Server, containerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ImageList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImageListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ImageRemove(ctx context.Context, imageId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImageRemoveRequest(c.Server, imageId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkCreate(ctx context.Context, body NetworkCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkRemove(ctx context.Context, networkId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkRemoveRequest(c.Server, networkId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkConnect(ctx context.Context, networkId string, containerId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkConnectRequest(c.Server, networkId, containerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkDisconnect(ctx context.Context, networkId string, containerId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkDisconnectRequest(c.Server, networkId, containerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolumeCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolumeCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolumeCreate(ctx context.Context, body VolumeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolumeCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolumeList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolumeListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VolumeRemove(ctx context.Context, volumeName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVolumeRemoveRequest(c.Server, volumeName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewContainerCreateRequest calls the generic ContainerCreate builder with application/json body
func NewContainerCreateRequest(server string, params *ContainerCreateParams, body ContainerCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewContainerCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewContainerCreateRequestWithBody generates requests for ContainerCreate with any type of body
func NewContainerCreateRequestWithBody(server string, params *ContainerCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/containers/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewContainerListRequest generates requests for ContainerList
func NewContainerListRequest(server string, params *ContainerListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/containers/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.All != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "all", runtime.ParamLocationQuery, *params.All); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContainerDeleteRequest generates requests for ContainerDelete
func NewContainerDeleteRequest(server string, containerId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "container_id", runtime.ParamLocationPath, containerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/containers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContainerStartRequest generates requests for ContainerStart
func NewContainerStartRequest(server string, containerId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "container_id", runtime.ParamLocationPath, containerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/containers/%s/start", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContainerStopRequest generates requests for ContainerStop
func NewContainerStopRequest(server string, containerId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "container_id", runtime.ParamLocationPath, containerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/containers/%s/stop", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewImageListRequest generates requests for ImageList
func NewImageListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/images/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewImageRemoveRequest generates requests for ImageRemove
func NewImageRemoveRequest(server string, imageId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "image_id", runtime.ParamLocationPath, imageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/images/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkCreateRequest calls the generic NetworkCreate builder with application/json body
func NewNetworkCreateRequest(server string, body NetworkCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNetworkCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewNetworkCreateRequestWithBody generates requests for NetworkCreate with any type of body
func NewNetworkCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/networks/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNetworkListRequest generates requests for NetworkList
func NewNetworkListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/networks/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkRemoveRequest generates requests for NetworkRemove
func NewNetworkRemoveRequest(server string, networkId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "network_id", runtime.ParamLocationPath, networkId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/networks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkConnectRequest generates requests for NetworkConnect
func NewNetworkConnectRequest(server string, networkId string, containerId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "network_id", runtime.ParamLocationPath, networkId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "container_id", runtime.ParamLocationPath, containerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/networks/%s/connect/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkDisconnectRequest generates requests for NetworkDisconnect
func NewNetworkDisconnectRequest(server string, networkId string, containerId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "network_id", runtime.ParamLocationPath, networkId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "container_id", runtime.ParamLocationPath, containerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/networks/%s/disconnect/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVolumeCreateRequest calls the generic VolumeCreate builder with application/json body
func NewVolumeCreateRequest(server string, body VolumeCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVolumeCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewVolumeCreateRequestWithBody generates requests for VolumeCreate with any type of body
func NewVolumeCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/volumes/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVolumeListRequest generates requests for VolumeList
func NewVolumeListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/volumes/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVolumeRemoveRequest generates requests for VolumeRemove
func NewVolumeRemoveRequest(server string, volumeName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "volume_name", runtime.ParamLocationPath, volumeName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/volumes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ContainerCreate request with any body
	ContainerCreateWithBodyWithResponse(ctx context.Context, params *ContainerCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContainerCreateResponse, error)

	ContainerCreateWithResponse(ctx context.Context, params *ContainerCreateParams, body ContainerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ContainerCreateResponse, error)

	// ContainerList request
	ContainerListWithResponse(ctx context.Context, params *ContainerListParams, reqEditors ...RequestEditorFn) (*ContainerListResponse, error)

	// ContainerDelete request
	ContainerDeleteWithResponse(ctx context.Context, containerId string, reqEditors ...RequestEditorFn) (*ContainerDeleteResponse, error)

	// ContainerStart request
	ContainerStartWithResponse(ctx context.Context, containerId string, reqEditors ...RequestEditorFn) (*ContainerStartResponse, error)

	// ContainerStop request
	ContainerStopWithResponse(ctx context.Context, containerId string, reqEditors ...RequestEditorFn) (*ContainerStopResponse, error)

	// ImageList request
	ImageListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ImageListResponse, error)

	// ImageRemove request
	ImageRemoveWithResponse(ctx context.Context, imageId string, reqEditors ...RequestEditorFn) (*ImageRemoveResponse, error)

	// NetworkCreate request with any body
	NetworkCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkCreateResponse, error)

	NetworkCreateWithResponse(ctx context.Context, body NetworkCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkCreateResponse, error)

	// NetworkList request
	NetworkListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*NetworkListResponse, error)

	// NetworkRemove request
	NetworkRemoveWithResponse(ctx context.Context, networkId string, reqEditors ...RequestEditorFn) (*NetworkRemoveResponse, error)

	// NetworkConnect request
	NetworkConnectWithResponse(ctx context.Context, networkId string, containerId string, reqEditors ...RequestEditorFn) (*NetworkConnectResponse, error)

	// NetworkDisconnect request
	NetworkDisconnectWithResponse(ctx context.Context, networkId string, containerId string, reqEditors ...RequestEditorFn) (*NetworkDisconnectResponse, error)

	// VolumeCreate request with any body
	VolumeCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VolumeCreateResponse, error)

	VolumeCreateWithResponse(ctx context.Context, body VolumeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*VolumeCreateResponse, error)

	// VolumeList request
	VolumeListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*VolumeListResponse, error)

	// VolumeRemove request
	VolumeRemoveWithResponse(ctx context.Context, volumeName string, reqEditors ...RequestEditorFn) (*VolumeRemoveResponse, error)
}

type ContainerCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *IdResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ContainerCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContainerCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContainerListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ContainerSummary
}

// Status returns HTTPResponse.Status
func (r ContainerListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContainerListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContainerDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IdResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ContainerDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContainerDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContainerStartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IdResponse
	JSON304      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ContainerStartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContainerStartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContainerStopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IdResponse
	JSON304      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ContainerStopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContainerStopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ImageListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Image
}

// Status returns HTTPResponse.Status
func (r ImageListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ImageListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ImageRemoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IdResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ImageRemoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ImageRemoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *IdResponse
	JSON409      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r NetworkCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]NetworkSummary
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r NetworkListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkRemoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IdResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r NetworkRemoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkRemoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkConnectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r NetworkConnectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkConnectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkDisconnectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r NetworkDisconnectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkDisconnectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolumeCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *IdResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r VolumeCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolumeCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolumeListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]VolumeSummary
}

// Status returns HTTPResponse.Status
func (r VolumeListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolumeListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VolumeRemoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IdResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r VolumeRemoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VolumeRemoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ContainerCreateWithBodyWithResponse request with arbitrary body returning *ContainerCreateResponse
func (c *ClientWithResponses) ContainerCreateWithBodyWithResponse(ctx context.Context, params *ContainerCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContainerCreateResponse, error) {
	rsp, err := c.ContainerCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContainerCreateResponse(rsp)
}

func (c *ClientWithResponses) ContainerCreateWithResponse(ctx context.Context, params *ContainerCreateParams, body ContainerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ContainerCreateResponse, error) {
	rsp, err := c.ContainerCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContainerCreateResponse(rsp)
}

// ContainerListWithResponse request returning *ContainerListResponse
func (c *ClientWithResponses) ContainerListWithResponse(ctx context.Context, params *ContainerListParams, reqEditors ...RequestEditorFn) (*ContainerListResponse, error) {
	rsp, err := c.ContainerList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContainerListResponse(rsp)
}

// ContainerDeleteWithResponse request returning *ContainerDeleteResponse
func (c *ClientWithResponses) ContainerDeleteWithResponse(ctx context.Context, containerId string, reqEditors ...RequestEditorFn) (*ContainerDeleteResponse, error) {
	rsp, err := c.ContainerDelete(ctx, containerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContainerDeleteResponse(rsp)
}

// ContainerStartWithResponse request returning *ContainerStartResponse
func (c *ClientWithResponses) ContainerStartWithResponse(ctx context.Context, containerId string, reqEditors ...RequestEditorFn) (*ContainerStartResponse, error) {
	rsp, err := c.ContainerStart(ctx, containerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContainerStartResponse(rsp)
}

// ContainerStopWithResponse request returning *ContainerStopResponse
func (c *ClientWithResponses) ContainerStopWithResponse(ctx context.Context, containerId string, reqEditors ...RequestEditorFn) (*ContainerStopResponse, error) {
	rsp, err := c.ContainerStop(ctx, containerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContainerStopResponse(rsp)
}

// ImageListWithResponse request returning *ImageListResponse
func (c *ClientWithResponses) ImageListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ImageListResponse, error) {
	rsp, err := c.ImageList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImageListResponse(rsp)
}

// ImageRemoveWithResponse request returning *ImageRemoveResponse
func (c *ClientWithResponses) ImageRemoveWithResponse(ctx context.Context, imageId string, reqEditors ...RequestEditorFn) (*ImageRemoveResponse, error) {
	rsp, err := c.ImageRemove(ctx, imageId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImageRemoveResponse(rsp)
}

// NetworkCreateWithBodyWithResponse request with arbitrary body returning *NetworkCreateResponse
func (c *ClientWithResponses) NetworkCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkCreateResponse, error) {
	rsp, err := c.NetworkCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkCreateResponse(rsp)
}

func (c *ClientWithResponses) NetworkCreateWithResponse(ctx context.Context, body NetworkCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkCreateResponse, error) {
	rsp, err := c.NetworkCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkCreateResponse(rsp)
}

// NetworkListWithResponse request returning *NetworkListResponse
func (c *ClientWithResponses) NetworkListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*NetworkListResponse, error) {
	rsp, err := c.NetworkList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkListResponse(rsp)
}

// NetworkRemoveWithResponse request returning *NetworkRemoveResponse
func (c *ClientWithResponses) NetworkRemoveWithResponse(ctx context.Context, networkId string, reqEditors ...RequestEditorFn) (*NetworkRemoveResponse, error) {
	rsp, err := c.NetworkRemove(ctx, networkId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkRemoveResponse(rsp)
}

// NetworkConnectWithResponse request returning *NetworkConnectResponse
func (c *ClientWithResponses) NetworkConnectWithResponse(ctx context.Context, networkId string, containerId string, reqEditors ...RequestEditorFn) (*NetworkConnectResponse, error) {
	rsp, err := c.NetworkConnect(ctx, networkId, containerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkConnectResponse(rsp)
}

// NetworkDisconnectWithResponse request returning *NetworkDisconnectResponse
func (c *ClientWithResponses) NetworkDisconnectWithResponse(ctx context.Context, networkId string, containerId string, reqEditors ...RequestEditorFn) (*NetworkDisconnectResponse, error) {
	rsp, err := c.NetworkDisconnect(ctx, networkId, containerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkDisconnectResponse(rsp)
}

// VolumeCreateWithBodyWithResponse request with arbitrary body returning *VolumeCreateResponse
func (c *ClientWithResponses) VolumeCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VolumeCreateResponse, error) {
	rsp, err := c.VolumeCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolumeCreateResponse(rsp)
}

func (c *ClientWithResponses) VolumeCreateWithResponse(ctx context.Context, body VolumeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*VolumeCreateResponse, error) {
	rsp, err := c.VolumeCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolumeCreateResponse(rsp)
}

// VolumeListWithResponse request returning *VolumeListResponse
func (c *ClientWithResponses) VolumeListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*VolumeListResponse, error) {
	rsp, err := c.VolumeList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolumeListResponse(rsp)
}

// VolumeRemoveWithResponse request returning *VolumeRemoveResponse
func (c *ClientWithResponses) VolumeRemoveWithResponse(ctx context.Context, volumeName string, reqEditors ...RequestEditorFn) (*VolumeRemoveResponse, error) {
	rsp, err := c.VolumeRemove(ctx, volumeName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVolumeRemoveResponse(rsp)
}

// ParseContainerCreateResponse parses an HTTP response from a ContainerCreateWithResponse call
func ParseContainerCreateResponse(rsp *http.Response) (*ContainerCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ContainerCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest IdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseContainerListResponse parses an HTTP response from a ContainerListWithResponse call
func ParseContainerListResponse(rsp *http.Response) (*ContainerListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ContainerListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ContainerSummary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseContainerDeleteResponse parses an HTTP response from a ContainerDeleteWithResponse call
func ParseContainerDeleteResponse(rsp *http.Response) (*ContainerDeleteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ContainerDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseContainerStartResponse parses an HTTP response from a ContainerStartWithResponse call
func ParseContainerStartResponse(rsp *http.Response) (*ContainerStartResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ContainerStartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 304:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON304 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseContainerStopResponse parses an HTTP response from a ContainerStopWithResponse call
func ParseContainerStopResponse(rsp *http.Response) (*ContainerStopResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ContainerStopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 304:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON304 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseImageListResponse parses an HTTP response from a ImageListWithResponse call
func ParseImageListResponse(rsp *http.Response) (*ImageListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ImageListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Image
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseImageRemoveResponse parses an HTTP response from a ImageRemoveWithResponse call
func ParseImageRemoveResponse(rsp *http.Response) (*ImageRemoveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ImageRemoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkCreateResponse parses an HTTP response from a NetworkCreateWithResponse call
func ParseNetworkCreateResponse(rsp *http.Response) (*NetworkCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &NetworkCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest IdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseNetworkListResponse parses an HTTP response from a NetworkListWithResponse call
func ParseNetworkListResponse(rsp *http.Response) (*NetworkListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &NetworkListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []NetworkSummary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseNetworkRemoveResponse parses an HTTP response from a NetworkRemoveWithResponse call
func ParseNetworkRemoveResponse(rsp *http.Response) (*NetworkRemoveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &NetworkRemoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseNetworkConnectResponse parses an HTTP response from a NetworkConnectWithResponse call
func ParseNetworkConnectResponse(rsp *http.Response) (*NetworkConnectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &NetworkConnectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseNetworkDisconnectResponse parses an HTTP response from a NetworkDisconnectWithResponse call
func ParseNetworkDisconnectResponse(rsp *http.Response) (*NetworkDisconnectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &NetworkDisconnectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVolumeCreateResponse parses an HTTP response from a VolumeCreateWithResponse call
func ParseVolumeCreateResponse(rsp *http.Response) (*VolumeCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &VolumeCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest IdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVolumeListResponse parses an HTTP response from a VolumeListWithResponse call
func ParseVolumeListResponse(rsp *http.Response) (*VolumeListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &VolumeListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []VolumeSummary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVolumeRemoveResponse parses an HTTP response from a VolumeRemoveWithResponse call
func ParseVolumeRemoveResponse(rsp *http.Response) (*VolumeRemoveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &VolumeRemoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a container
	// (POST /containers/create)
	ContainerCreate(ctx echo.Context, params ContainerCreateParams) error
	// List containers
	// (GET /containers/list)
	ContainerList(ctx echo.Context, params ContainerListParams) error
	// Remove a container
	// (DELETE /containers/{container_id})
	ContainerDelete(ctx echo.Context, containerId string) error
	// Start a container
	// (POST /containers/{container_id}/start)
	ContainerStart(ctx echo.Context, containerId string) error
	// Stop a container
	// (POST /containers/{container_id}/stop)
	ContainerStop(ctx echo.Context, containerId string) error
	// List images
	// (GET /images/list)
	ImageList(ctx echo.Context) error
	// Remove image
	// (DELETE /images/{image_id})
	ImageRemove(ctx echo.Context, imageId string) error
	// Create network
	// (POST /networks/create)
	NetworkCreate(ctx echo.Context) error
	// List networks
	// (GET /networks/list)
	NetworkList(ctx echo.Context) error
	// Remove a network
	// (DELETE /networks/{network_id})
	NetworkRemove(ctx echo.Context, networkId string) error
	// Connect a container to a network
	// (POST /networks/{network_id}/connect/{container_id})
	NetworkConnect(ctx echo.Context, networkId string, containerId string) error
	// Disconnect a container from a network
	// (POST /networks/{network_id}/disconnect/{container_id})
	NetworkDisconnect(ctx echo.Context, networkId string, containerId string) error
	// Create a volume
	// (POST /volumes/create)
	VolumeCreate(ctx echo.Context) error
	// List volumes
	// (GET /volumes/list)
	VolumeList(ctx echo.Context) error
	// Remove a volume
	// (DELETE /volumes/{volume_name})
	VolumeRemove(ctx echo.Context, volumeName string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ContainerCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ContainerCreate(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ContainerCreateParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ContainerCreate(ctx, params)
	return err
}

// ContainerList converts echo context to params.
func (w *ServerInterfaceWrapper) ContainerList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ContainerListParams
	// ------------- Optional query parameter "all" -------------

	err = runtime.BindQueryParameter("form", true, false, "all", ctx.QueryParams(), &params.All)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter all: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ContainerList(ctx, params)
	return err
}

// ContainerDelete converts echo context to params.
func (w *ServerInterfaceWrapper) ContainerDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "container_id" -------------
	var containerId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "container_id", runtime.ParamLocationPath, ctx.Param("container_id"), &containerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter container_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ContainerDelete(ctx, containerId)
	return err
}

// ContainerStart converts echo context to params.
func (w *ServerInterfaceWrapper) ContainerStart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "container_id" -------------
	var containerId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "container_id", runtime.ParamLocationPath, ctx.Param("container_id"), &containerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter container_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ContainerStart(ctx, containerId)
	return err
}

// ContainerStop converts echo context to params.
func (w *ServerInterfaceWrapper) ContainerStop(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "container_id" -------------
	var containerId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "container_id", runtime.ParamLocationPath, ctx.Param("container_id"), &containerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter container_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ContainerStop(ctx, containerId)
	return err
}

// ImageList converts echo context to params.
func (w *ServerInterfaceWrapper) ImageList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ImageList(ctx)
	return err
}

// ImageRemove converts echo context to params.
func (w *ServerInterfaceWrapper) ImageRemove(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "image_id" -------------
	var imageId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "image_id", runtime.ParamLocationPath, ctx.Param("image_id"), &imageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter image_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ImageRemove(ctx, imageId)
	return err
}

// NetworkCreate converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkCreate(ctx)
	return err
}

// NetworkList converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkList(ctx)
	return err
}

// NetworkRemove converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkRemove(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "network_id" -------------
	var networkId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "network_id", runtime.ParamLocationPath, ctx.Param("network_id"), &networkId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter network_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkRemove(ctx, networkId)
	return err
}

// NetworkConnect converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkConnect(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "network_id" -------------
	var networkId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "network_id", runtime.ParamLocationPath, ctx.Param("network_id"), &networkId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter network_id: %s", err))
	}

	// ------------- Path parameter "container_id" -------------
	var containerId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "container_id", runtime.ParamLocationPath, ctx.Param("container_id"), &containerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter container_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkConnect(ctx, networkId, containerId)
	return err
}

// NetworkDisconnect converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkDisconnect(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "network_id" -------------
	var networkId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "network_id", runtime.ParamLocationPath, ctx.Param("network_id"), &networkId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter network_id: %s", err))
	}

	// ------------- Path parameter "container_id" -------------
	var containerId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "container_id", runtime.ParamLocationPath, ctx.Param("container_id"), &containerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter container_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkDisconnect(ctx, networkId, containerId)
	return err
}

// VolumeCreate converts echo context to params.
func (w *ServerInterfaceWrapper) VolumeCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.VolumeCreate(ctx)
	return err
}

// VolumeList converts echo context to params.
func (w *ServerInterfaceWrapper) VolumeList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.VolumeList(ctx)
	return err
}

// VolumeRemove converts echo context to params.
func (w *ServerInterfaceWrapper) VolumeRemove(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "volume_name" -------------
	var volumeName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "volume_name", runtime.ParamLocationPath, ctx.Param("volume_name"), &volumeName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter volume_name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.VolumeRemove(ctx, volumeName)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/containers/create", wrapper.ContainerCreate)
	router.GET(baseURL+"/containers/list", wrapper.ContainerList)
	router.DELETE(baseURL+"/containers/:container_id", wrapper.ContainerDelete)
	router.POST(baseURL+"/containers/:container_id/start", wrapper.ContainerStart)
	router.POST(baseURL+"/containers/:container_id/stop", wrapper.ContainerStop)
	router.GET(baseURL+"/images/list", wrapper.ImageList)
	router.DELETE(baseURL+"/images/:image_id", wrapper.ImageRemove)
	router.POST(baseURL+"/networks/create", wrapper.NetworkCreate)
	router.GET(baseURL+"/networks/list", wrapper.NetworkList)
	router.DELETE(baseURL+"/networks/:network_id", wrapper.NetworkRemove)
	router.POST(baseURL+"/networks/:network_id/connect/:container_id", wrapper.NetworkConnect)
	router.POST(baseURL+"/networks/:network_id/disconnect/:container_id", wrapper.NetworkDisconnect)
	router.POST(baseURL+"/volumes/create", wrapper.VolumeCreate)
	router.GET(baseURL+"/volumes/list", wrapper.VolumeList)
	router.DELETE(baseURL+"/volumes/:volume_name", wrapper.VolumeRemove)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"F4v/BwAA//+tflsUkz0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

